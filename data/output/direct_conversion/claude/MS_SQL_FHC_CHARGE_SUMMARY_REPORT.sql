
CREATE PROCEDURE FHC_CHARGE_SUMMARY_REPORT
  @BEGIN_DATE VARCHAR(50),
  @END_DATE VARCHAR(50)
AS
BEGIN
  --LOAD POPULATION INTO MEMORY
  TRUNCATE TABLE FHC_CHARGE_SUMMARY_POPULATION_GTT;

  WITH REPORT_PARAM AS (
    SELECT 
      CAST(@BEGIN_DATE AS DATE) AS START_DATE, 
      CAST(@END_DATE AS DATE) AS END_DATE
  ),
  POPULATION AS (
    SELECT PE.PAT_ENC_CSN_ID
      ,PE.PAT_ENC_DATE_REAL
      ,PE.PAT_ID
      ,PT.PAT_MRN_ID  
      ,PT.PAT_NAME
      ,PE.HSP_ACCOUNT_ID
      ,PE.CONTACT_DATE
      ,PE.CHARGE_SLIP_NUMBER
      ,ser.PROV_TYPE AS PROV_PRIM_SPEC
      ,ENC_TYPE.name AS ENC_TYPE  
      ,ZAS.NAME as APPT_STATUS_NAME
      ,CASE 
        WHEN PT.PAT_MRN_ID IS NULL THEN '*No Patient Record for #' + CAST(PT.PAT_ID AS VARCHAR(20)) + ' *'
        WHEN PT.PAT_NAME IS NULL THEN PT.PAT_MRN_ID
        ELSE PT.PAT_NAME 
       END AS PATIENT
      ,CASE
        WHEN PE.VISIT_PROV_ID IS NULL THEN '*No Visit Provider*'  
        WHEN SER.PROV_ID IS NULL THEN '*No SER Record*'
        ELSE SER.PROV_NAME + ' [' + CAST(SER.PROV_ID AS VARCHAR(20)) + ']'
       END AS VISIT_PROVIDER
      ,DEP.DEPARTMENT_ID
      ,DEP.DEPARTMENT_NAME  
      ,center.name AS DEPARTMENT_CENTER
      ,LOC.LOC_ID
      ,LOC.LOC_NAME
      ,PRC.PRC_NAME
      ,CASE 
        WHEN PE.ENC_CLOSED_YN IS NULL OR PE.ENC_CLOSED_YN = 'N' THEN 'NO' 
        ELSE 'YES' 
       END AS ENC_CLOSED
    FROM PAT_ENC PE
    INNER JOIN PATIENT PT on PE.PAT_ID = PT.PAT_ID
    
    LEFT JOIN CLARITY_SER SER ON PE.VISIT_PROV_ID = SER.PROV_ID
    LEFT JOIN CLARITY_SER_SPEC CSS ON SER.PROV_ID = CSS.PROV_ID AND CSS.LINE = 1
    LEFT JOIN ZC_SPECIALTY ON CSS.SPECIALTY_C = ZC_SPECIALTY.SPECIALTY_C
         
    LEFT JOIN CLARITY_PRC PRC ON PE.APPT_PRC_ID = PRC.PRC_ID 
    LEFT JOIN ZC_DISP_ENC_TYPE ENC_TYPE ON PE.ENC_TYPE_C = ENC_TYPE.DISP_ENC_TYPE_C
    LEFT JOIN ZC_APPT_STATUS ZAS ON PE.APPT_STATUS_C = ZAS.APPT_STATUS_C
         
    INNER JOIN CLARITY_DEP DEP ON PE.DEPARTMENT_ID = DEP.DEPARTMENT_ID
    LEFT JOIN ZC_CENTER CENTER ON DEP.CENTER_C = CENTER.CENTER_C
         
    INNER JOIN CLARITY_LOC LOC ON DEP.REV_LOC_ID = LOC.LOC_ID
    LEFT JOIN CLARITY_SA SA ON LOC.SERV_AREA_ID = SA.SERV_AREA_ID
    LEFT JOIN ZC_LOC_RPT_GRP_11 ZC11 ON LOC.RPT_GRP_ELEVEN_C = ZC11.RPT_GRP_ELEVEN_C
    
    WHERE NULL IS NULL
      AND PE.CHECKIN_TIME IS NOT NULL 
      AND PE.APPT_STATUS_C NOT IN (3,4,5)
      AND PE.ENC_TYPE_C NOT IN ('2101','2505') 
      AND PE.APPT_PRC_ID NOT IN ('1192') 
      AND DEP.DEPARTMENT_ID NOT IN (10803010)
      AND PT.PAT_NAME NOT LIKE 'ZZZ%'
      AND PT.PAT_NAME NOT LIKE 'ZZTEST%'
      --AND PE.SERV_AREA_ID = 10
      --AND PE.SERV_AREA_ID NOT IN (30,50) 
      AND LOC.RPT_GRP_TWELVE_C = '11'
      AND LOC.LOC_ID NOT IN (10793,10794)
      AND PE.CONTACT_DATE BETWEEN (SELECT START_DATE FROM REPORT_PARAM) AND (SELECT END_DATE FROM REPORT_PARAM)
  )
  INSERT INTO FHC_CHARGE_SUMMARY_POPULATION_GTT
  SELECT * FROM POPULATION;

  -- LOAD BILLING INFORMATION IN MEMORY
  TRUNCATE TABLE FHC_CHARGE_SUMMARY_BILLING_GTT;
  
  WITH BILLING_HTR_CODES AS (
    SELECT 
      PAT_ID,
      PAT_ENC_DATE_REAL,
      PAT_ENC_CSN_ID,
      CODE_POS_ID,
      CODE,
      CODE_MODIFIERS,
      CODE_TYPE,
      CODE_SERVICE_DATE, 
      CODE_SOURCE,
      CODE_ID,
      CODE_UCL_ID,
      TX_AMOUNT
    FROM (  
      SELECT 
        POPULATION.PAT_ID,
        POPULATION.PAT_ENC_DATE_REAL,
        POPULATION.PAT_ENC_CSN_ID,
        HSP_TRANSACTIONS.PLACE_OF_SVC_ID AS CODE_POS_ID,
        HSP_TRANSACTIONS.HCPCS_CODE,
        HSP_TRANSACTIONS.CPT_CODE,
        HSP_TRANSACTIONS.MODIFIERS AS CODE_MODIFIERS,
        'CPT' AS CODE_TYPE,
        SERVICE_DATE AS CODE_SERVICE_DATE,
        'HTR' AS CODE_SOURCE,
        HSP_TRANSACTIONS.PROC_ID AS CODE_ID,
        HSP_TRANSACTIONS.CHG_ROUTER_SRC_ID AS CODE_UCL_ID,
        HSP_TRANSACTIONS.TX_AMOUNT   
      FROM FHC_CHARGE_SUMMARY_POPULATION_GTT POPULATION
      INNER JOIN HSP_TRANSACTIONS ON HSP_TRANSACTIONS.HSP_ACCOUNT_ID = POPULATION.HSP_ACCOUNT_ID
        AND HSP_TRANSACTIONS.PAT_ENC_CSN_ID = POPULATION.PAT_ENC_CSN_ID  
    ) AS SOURCE
    UNPIVOT (
      CODE FOR BILL_CODE IN (CPT_CODE, HCPCS_CODE)  
    ) AS UNPVT
  ),

  BILLING_TDL_CODES AS (
    SELECT 
      POPULATION.PAT_ID,
      POPULATION.PAT_ENC_DATE_REAL,
      POPULATION.PAT_ENC_CSN_ID,
      ARPB_TRANSACTIONS.SERVICE_AREA_ID AS CODE_POS_ID,
      CLARITY_TDL_TRAN.CPT_CODE AS CODE,
      CLARITY_TDL_TRAN.MODIFIER_ONE +
        CASE WHEN CLARITY_TDL_TRAN.MODIFIER_TWO IS NOT NULL THEN ',' + CLARITY_TDL_TRAN.MODIFIER_TWO ELSE '' END +   
        CASE WHEN CLARITY_TDL_TRAN.MODIFIER_THREE IS NOT NULL THEN ',' + CLARITY_TDL_TRAN.MODIFIER_THREE ELSE '' END +
        CASE WHEN CLARITY_TDL_TRAN.MODIFIER_FOUR IS NOT NULL THEN ',' + CLARITY_TDL_TRAN.MODIFIER_FOUR ELSE '' END AS CODE_MODIFIERS,
      'CPT' AS CODE_TYPE,
      ARPB_TRANSACTIONS.SERVICE_DATE AS CODE_SERVICE_DATE,
      'ETR' AS CODE_SOURCE,
      CLARITY_TDL_TRAN.PROC_ID AS CODE_ID, 
      ARPB_TRANSACTIONS.CHG_ROUTER_SRC_ID AS CODE_UCL_ID,
      PRE_AR_CHG.AMOUNT AS TX_AMOUNT
    FROM FHC_CHARGE_SUMMARY_POPULATION_GTT POPULATION
    
    INNER JOIN ARPB_TRANSACTIONS ON ARPB_TRANSACTIONS.PAT_ENC_CSN_ID = POPULATION.PAT_ENC_CSN_ID   
    INNER JOIN CLARITY_TDL_TRAN ON ARPB_TRANSACTIONS.TX_ID = CLARITY_TDL_TRAN.TX_ID
      AND CLARITY_TDL_TRAN.DETAIL_TYPE = 1
    INNER JOIN ARPB_TX_MODERATE ON ARPB_TRANSACTIONS.TX_ID = ARPB_TX_MODERATE.TX_ID  
    INNER JOIN PRE_AR_CHG ON ARPB_TX_MODERATE.ORIGINATING_TAR_ID = PRE_AR_CHG.TAR_ID
  ),

  UNIFIED_BILLING AS ( 
    SELECT 
      BILLING_PB_HB.*,
      CLARITY_POS.POS_ID,
      CLARITY_POS.POS_CODE,
      CLARITY_POS.POS_NAME,
      CLARITY_EAP.PROC_NAME AS CODE_DESCRIPTION,
      CLARITY_UCL.CHARGE_SOURCE_C AS UCL_CHARGE_SOURCE_C,
      ZC_CHG_SOURCE_UCL.NAME AS UCL_CHARGE_SOURCE
    FROM (
      SELECT * FROM BILLING_HTR_CODES
      UNION ALL
      SELECT * FROM BILLING_TDL_CODES  
    ) BILLING_PB_HB
    INNER JOIN CLARITY_EAP ON BILLING_PB_HB.CODE_ID = CLARITY_EAP.PROC_ID
    LEFT JOIN CLARITY_UCL ON BILLING_PB_HB.CODE_UCL_ID = CLARITY_UCL.UCL_ID 
      AND (CLARITY_UCL.SYSTEM_FLAG_C <> 2 OR CLARITY_UCL.SYSTEM_FLAG_C IS NULL)
    LEFT JOIN ZC_CHG_SOURCE_UCL ON CLARITY_UCL.CHARGE_SOURCE_C = ZC_CHG_SOURCE_UCL.CHG_SOURCE_UCL_C  
    LEFT JOIN CLARITY_POS ON BILLING_PB_HB.CODE_POS_ID = CLARITY_POS.POS_ID
    WHERE (BILLING_PB_HB.CODE_UCL_ID IS NOT NULL AND CLARITY_UCL.UCL_ID IS NOT NULL) 
      OR BILLING_PB_HB.CODE_UCL_ID IS NULL
  ),

  UNIFIED_BILLING_PIVOT AS (
    SELECT 
      PAT_ENC_CSN_ID,
      MAX(CASE WHEN CODE_SOURCE = 'HTR' THEN 1 ELSE 0 END) AS HB_CHARGE_EXISTS,
      MAX(CASE WHEN CODE_SOURCE = 'HTR' AND UCL_CHARGE_SOURCE_C = '2' THEN 1 ELSE 0 END) AS HB_CHARGE_SOURCE_EPICCARE,
      SUM(CASE WHEN CODE_SOURCE = 'HTR' THEN TX_AMOUNT ELSE 0 END) AS HB_CHARGE_TX_AMOUNT,  
      CAST(LEFT(
        (SELECT STRING_AGG(CODE_DESCRIPTION, ', ') 
         FROM (
           SELECT CODE_DESCRIPTION, ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ROWNUMBER
           FROM UNIFIED_BILLING 
           WHERE CODE_SOURCE = 'HTR' AND PAT_ENC_CSN_ID = UB.PAT_ENC_CSN_ID
         ) T
         WHERE ROWNUMBER <= 4000
         FOR XML PATH('')  
        ), 4000) AS VARCHAR(4000)
      ) AS HB_CHARGE_AGG_CODES_DESC,

      CASE WHEN SUM(CASE WHEN CODE_SOURCE = 'HTR' THEN LEN(CODE_DESCRIPTION) END) > 4000 THEN 1 ELSE 0 END AS HB_CHARGE_AGG_CODES_OVERFLOW_FLAG,

      MAX(CASE WHEN CODE_SOURCE = 'ETR' THEN 1 ELSE 0 END) AS PB_CHARGE_EXISTS,
      MAX(CASE WHEN CODE_SOURCE = 'ETR' AND UCL_CHARGE_SOURCE_C = '2' THEN 1 ELSE 0 END) AS PB_CHARGE_SOURCE_EPICCARE,  
      SUM(CASE WHEN CODE_SOURCE = 'ETR' THEN TX_AMOUNT ELSE 0 END) AS PB_CHARGE_TX_AMOUNT,

      CAST(LEFT(
        (SELECT STRING_AGG(CODE_DESCRIPTION, ', ') 
         FROM (
           SELECT CODE_DESCRIPTION, ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ROWNUMBER  
           FROM UNIFIED_BILLING
           WHERE CODE_SOURCE = 'ETR' AND PAT_ENC_CSN_ID = UB.PAT_ENC_CSN_ID  
         ) T
         WHERE ROWNUMBER <= 4000
         FOR XML PATH('')
        ), 4000) AS VARCHAR(4000)   
      ) AS PB_CHARGE_AGG_CODES_DESC,

      CASE WHEN SUM(CASE WHEN CODE_SOURCE = 'ETR' THEN LEN(CODE_DESCRIPTION) END) > 4000 THEN 1 ELSE 0 END AS PB_CHARGE_AGG_CODES_OVERFLOW_FLAG
         
    FROM UNIFIED_BILLING UB
    GROUP BY PAT_ENC_CSN_ID
  )

  INSERT INTO FHC_CHARGE_SUMMARY_BILLING_GTT
  SELECT * FROM UNIFIED_BILLING_PIVOT;

  -- RETURN ENCOUNTERS WITH NO BILLING INFORMATION  
  SELECT
    POPULATION.PAT_ENC_CSN_ID AS "CSN",
    POPULATION.CONTACT_DATE AS "Date", 
    POPULATION.PRC_NAME AS "Visit Type",
    POPULATION.ENC_TYPE AS "Encounter Type",
    POPULATION.DEPARTMENT_CENTER AS "Center",  
    POPULATION.LOC_NAME,
    POPULATION.DEPARTMENT_NAME,
    POPULATION.VISIT_PROVIDER AS "Provider",
    POPULATION.PAT_MRN_ID,
    POPULATION.PAT_NAME AS "PATIENT",
    POPULATION.ENC_CLOSED,
    PB_CHARGE_EXISTS AS "PB Charge Exists",
    PB_CHARGE_SOURCE_EPICCARE AS "PB Source EpicCare",
    PB_CHARGE_AGG_CODES_DESC AS "PB Charge List",
    PB_CHARGE_AGG_CODES_OVERFLOW_FLAG AS "PB Charge List Overflow Flag",
    PB_CHARGE_TX_AMOUNT AS "PB Charge Amount",
    HB_CHARGE_EXISTS AS "HB Charge Exists", 
    HB_CHARGE_SOURCE_EPICCARE AS "HB Source EpicCare",
    HB_CHARGE_AGG_CODES_DESC AS "HB Charge List",
    HB_CHARGE_AGG_CODES_OVERFLOW_FLAG AS "HB Charge List Overflow Flag",
    HB_CHARGE_TX_AMOUNT AS "HB Charge Amount"
  FROM FHC_CHARGE_SUMMARY_POPULATION_GTT POPULATION
  LEFT JOIN FHC_CHARGE_SUMMARY_BILLING_GTT UNIFIED_BILLING_PIVOT 
    ON POPULATION.PAT_ENC_CSN_ID = UNIFIED_BILLING_PIVOT.PAT_ENC_CSN_ID
  WHERE UNIFIED_BILLING_PIVOT.PAT_ENC_CSN_ID IS NULL
     OR NOT (HB_CHARGE_SOURCE_EPICCARE = 1 AND PB_CHARGE_EXISTS = 1);
     
END;
